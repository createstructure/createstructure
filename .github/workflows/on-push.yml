name: Tests on every push

on:
  push

jobs:
  test-enviroment-variabiles:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - uses: oprypin/find-latest-tag@v1
      with:
        repository: createstructure/createstructure
        releases-only: true 
      id : latest
    - name: Set envirorment varible(s)
      run: |
        echo "::set-output name=PUSH_PATH::$(curl -sL https://api.github.com/repos/createstructure/createstructure/releases/latest | jq -r '.upload_url')"  
        echo "::set-output name=VERSION_TAG::$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')"
        echo "::set-output name=TAR_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').orig.tar.gz"
        echo "::set-output name=DEB_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_amd64.deb"
        echo "::set-output name=CHANGES_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_source.changes"
        echo "::set-output name=NUPKG_FILE::createstructure.$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
        echo "::set-output name=NUPKG_FILE_PATH::./choco/createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
      id: envirorment-variables
                
    - name: Print envirorment variables
      run: |
        echo "${{ steps.envirorment-variables.outputs.PUSH_PATH }}"
        echo ${{ steps.envirorment-variables.outputs.VERSION_TAG }}
        echo ${{ steps.envirorment-variables.outputs.TAR_FILE }}
        echo ${{ steps.envirorment-variables.outputs.CHANGES_FILE }}
        echo ${{ steps.envirorment-variables.outputs.NUPKG_FILE }}
        echo ${{ steps.envirorment-variables.outputs.NUPKG_FILE_PATH }}
  
  test-pip:
    needs: test-enviroment-variabiles
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
        pip install -r requirements/requirements.txt
    - name: Build
      run: |
        python setup.py sdist bdist_wheel

  create-deb:
    needs: test-enviroment-variabiles
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo add-apt-repository ppa:jyrki-pulliainen/dh-virtualenv
        sudo apt-get update
        sudo apt-get install build-essential debhelper devscripts equivs dh-virtualenv python3.8 gnupg gnupg2

    - uses: oprypin/find-latest-tag@v1
      with:
        repository: createstructure/createstructure
        releases-only: true 
      id : latest
    - name: Set envirorment varible(s)
      run: |
        echo "::set-output name=PUSH_PATH::$(curl -sL https://api.github.com/repos/createstructure/createstructure/releases/latest | jq -r '.upload_url')"  
        echo "::set-output name=VERSION_TAG::$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')"
        echo "::set-output name=TAR_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').orig.tar.gz"
        echo "::set-output name=DEB_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_amd64.deb"
        echo "::set-output name=CHANGES_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_source.changes"
        echo "::set-output name=NUPKG_FILE::createstructure.$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
        echo "::set-output name=NUPKG_FILE_PATH::./choco/createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
      id: envirorment-variables

    - name: Create .deb file
      run: |
        cd debian
        sudo echo "3.0 (native)" > debian/source/format
        dpkg-buildpackage -us -uc

  build-for-ppa:
    needs: test-enviroment-variabiles
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo add-apt-repository ppa:jyrki-pulliainen/dh-virtualenv
        sudo apt-get update
        sudo apt-get install build-essential debhelper devscripts equivs dh-virtualenv python3.8 gnupg gnupg2

    - uses: oprypin/find-latest-tag@v1
      with:
        repository: createstructure/createstructure
        releases-only: true 
      id : latest
    - name: Set envirorment varible(s)
      run: |
        echo "::set-output name=PUSH_PATH::$(curl -sL https://api.github.com/repos/createstructure/createstructure/releases/latest | jq -r '.upload_url')"  
        echo "::set-output name=VERSION_TAG::$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')"
        echo "::set-output name=TAR_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').orig.tar.gz"
        echo "::set-output name=DEB_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_amd64.deb"
        echo "::set-output name=CHANGES_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_source.changes"
        echo "::set-output name=NUPKG_FILE::createstructure.$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
        echo "::set-output name=NUPKG_FILE_PATH::./choco/createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
      id: envirorment-variables

    - name: gpg import 
      run: |
        #echo "${{ secrets.GPG_KEY }}" > key.txt
        #LC_ALL=C tr -cd 0-9a-fA-F < key.txt | xxd -r -p > key.asc
        #gpg --batch --passphrase ${{ secrets.GPG_PWS }} --import key.asc
        #sudo echo "export GPGKEY=${{ secrets.GPG_KEY }}" >> ~/.bashrc
        echo "${{ secrets.GPG_PUBKEY }}" > pubkey.txt
        echo "${{ secrets.GPG_SECKEY }}" > seckey.txt
        echo "${{ secrets.GPG_OTRUST }}" > otrust.txt
        LC_ALL=C tr -cd 0-9a-fA-F < pubkey.txt | xxd -r -p > pubkey.asc
        LC_ALL=C tr -cd 0-9a-fA-F < seckey.txt | xxd -r -p > seckey.asc
        gpg --batch --import pubkey.asc
        gpg --batch --passphrase ${{ secrets.GPG_PWS }} --import seckey.asc
        #gpg --import-ownertrust otrust.txt
        sudo echo "export GPGKEY=${{ secrets.GPG_KEY_ID }}" >> ~/.bashrc
        gpg --list-secret-keys

    - name: Create Debian package
      run: |
        tar -czvf ${{ steps.envirorment-variables.outputs.TAR_FILE }} debian/
        cd ./debian/
        debuild -S -sa -k${{ secrets.GPG_KEY_ID }} -p"gpg --batch --passphrase ${{ secrets.GPG_PWS }} --pinentry-mode loopback"
    
    - name: Checks files
      run: |
        sudo apt install tree
        tree

  test-choco:
    needs: test-enviroment-variabiles
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: 'x64'

    - uses: oprypin/find-latest-tag@v1
      with:
        repository: createstructure/createstructure
        releases-only: true 
      id : latest

    - name: Set envirorment varible(s)
      run: |
        echo "::set-output name=PUSH_PATH::$(curl -sL https://api.github.com/repos/createstructure/createstructure/releases/latest | jq -r '.upload_url')"  
        echo "::set-output name=VERSION_TAG::$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')"
        echo "::set-output name=TAR_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').orig.tar.gz"
        echo "::set-output name=DEB_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_amd64.deb"
        echo "::set-output name=CHANGES_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_source.changes"
        echo "::set-output name=NUPKG_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
        echo "::set-output name=NUPKG_FILE_PATH::./choco/createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
      id: envirorment-variables

    - name: Try to build & install
      run: |
        cd choco 
        choco pack
        choco install python
        choco install createstructure -d-v -s . --pre -y --force
        move ./* ../

  snap:
    runs-on: ubuntu-latest
    environment:
      name: snap
      url: https://snapcraft.io/createstructure

    steps:
    - uses: actions/checkout@v2
    - name: Install prerequirements
      run: |
        sudo snap install snapcraft --classic
    - name: Login
      run: |
        mkdir .snapcraft
        echo "${{ secrets.SNAP_LOGIN }}" > s.txt
        LC_ALL=C tr -cd 0-9a-fA-F < s.txt | xxd -r -p > .snapcraft/snapcraft.cfg
    - name: Build snap
      run: |
        snapcraft
    - name: Publish
      run: |
        snapcraft push *.snap --release beta
        #stable
        